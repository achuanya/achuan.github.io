<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>阿川的个人博客</title>
    <link>https://www.achuan.io/index.html</link>
    <description></description>
    
      <item>
        <title>Ubuntu Server部署日记</title>
        <link>https://www.achuan.io/index.html/2018-11-08-Ubuntu-Deployment.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-11-08-Ubuntu-Deployment.html</guid>
        <pubDate>Thu, 08 Nov 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt; 出于挂一些签到软件的原因我一直在用Windows Server2012，因为服务器配置较低图形界面操作卡的要死，干脆直接上纯命令操作系统的linux。
关于linux发行版我几乎都玩过。在选择linux服务器这块也没有太犹豫，我个人比较痴情Ubuntu，我个人用户对于服务器要求没有那么高，所以选择了 Ubuntu Server 16.04.1 LTS。不过我第一次部署纯命令操作系统，部署的过程中还是遇到一些小麻烦，不过办法总比困难多嘛！&lt;/p&gt;

&lt;h2 id=&quot;root登录&quot;&gt;root登录&lt;/h2&gt;
&lt;p&gt;首先，使用&lt;a href=&quot;http://linux.51yip.com/search/ssh&quot;&gt;ssh命令&lt;/a&gt;在终端登录到远程主机&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;achuan@achuan-pc:~$ sudo ssh ubuntu@139.199.105.72
[sudo] achuan 的密码： 
ubuntu@139.199.105.72&#39;s password:
The authenticity of host &#39;139.199.105.72 (139.199.105.72)&#39; can&#39;t be established.
ECDSA Key fingerprint is SHA256:HNndgD6z/I2L8DzCA5nk9w9CEzHpW9WouGAmkMDR7LK.
Are you sure you want to continue connecting (yes/no)? yes
ubuntu@139.199.105.72&#39;s password:
Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-130-generic x86_64)

* Documentation:    https://help.ubuntu.com
* Management:       https://landscape.canonical.com
* Support:          https://ubuntu.com/advantage
New release &#39;18.04.1 LTS&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.

Last login: Mon Nov 5 16:38:39 2018 From 119.28.7.195
ubuntu@VM-22-96-ubuntu:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时，登录时命令行出现了警告，它说这是一个新的地址，存在安全风险。简单了解一下之后，我选择面对风险　yes 顺利登入远程主机。&lt;br /&gt;
对我来说登入后第一件事莫过于设置root密码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo passwd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-vim&quot;&gt;安装 vim&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 习惯性的更新源...
$ sudo apt-get update
# 安装vim
$ sudo apt-get install vim-gtk
......
Do you want to continue [Y/n]? Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;命令行敲入　vi ,Tab一下，不出问题已经有　viｍ&lt;/p&gt;

&lt;h3 id=&quot;配置vim&quot;&gt;配置vim&lt;/h3&gt;
&lt;p&gt;强迫症的我，简单的配置一下…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/vim/vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件内容里有这么一句：syntax on&lt;br /&gt;
它的意思是“语法高亮”，别注释它！&lt;br /&gt;
为了提升体验我们需要set一下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set nu          # 在左侧显示行号
set tabstop=4   # tab长度设置为4
set cursorline  # 覆盖文件时不备份
set ruler       # 在右下角显示状态栏
set autoindent  # 自动锁紧
set showmatch   # 高亮显示匹配的括号
# 编码设置
set fencs=utf=uft-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
# 语言设置
set langmenu=zh_CN.UTF-8
set helplang=cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装apache&quot;&gt;安装apache&lt;/h2&gt;
&lt;p&gt;我们使用源安装&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache_HTTP_Server&quot;&gt;apache&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置apache&quot;&gt;配置apache&lt;/h3&gt;
&lt;p&gt;启动apache的两种姿势&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /etc/init.d/apache2 start
# 或
$ sudo service apache2 star
# [start] [restart] [stop] [status]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;推送文件到网站根目录&quot;&gt;推送文件到网站根目录&lt;/h3&gt;
&lt;p&gt;在这里我遇到一个问题&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@achuan-pc:/home/achuan/视频/ubuntu# scp -r htdocs ubuntu@139.199.105.72:/var/www
ubuntu@139.199.105.72&#39;s password: 
scp: /var/www/htdocs: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 scp 推送文件夹的时候出现了　“Permission denied”&lt;br /&gt;
what the?　我被拒绝了？&lt;/p&gt;

&lt;p&gt;想了想原来是网站的根目录 /var/www 没有写入权限，让我们chmod一下？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh ubuntu@139.199.105.72
......
$ sudo chmod 777 -R /var/www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;已经解决了让我们再 scp 一下！&lt;/p&gt;

&lt;h3 id=&quot;解决ssh自动断连&quot;&gt;解决ssh自动断连&lt;/h3&gt;
&lt;p&gt;这个自动断连就让我很是难受，不管是利用终端还是客户端工具都会出现这个问题，经过了解原来是正常的…&lt;br /&gt;
使用ssh连接远程服务器隔段时间没有任何操作，客户端与服务器就会自动断连，解决办法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/ssh/sshd_config
$ sudo service sshd reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们需要修改客户端或服务器端　/etc/ssh/sshd_config　配置文件，找到　ClientAliveInterval 60（分钟单位，默认0）意思的每一分钟向客户端发送一个消息，用于保持连接，&lt;/p&gt;

&lt;h3 id=&quot;virtualhost配置&quot;&gt;VirtualHost配置&lt;/h3&gt;
&lt;p&gt;关于ubuntu serverd的apache配置文件在 /etc/apache2/apache.conf 当apache启动时会自动读取这个文件的配置信息，而其他的一些配置文件，则是通过Include指令引入。奇怪的是我找不到httpd.conf，算了自己动手丰衣足食&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 进入apache文件夹 &amp;gt; 创建 httpd.conf
$ cd /etc/apache2/ &amp;amp;&amp;amp; sudo vi httpd.conf
# 并写入以下配置内容

# 如果你的服务器有多个IP、不同的虚拟用户时，你可以更改它
&amp;lt;VirtualHost [IP]:[端口]&amp;gt;
...
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin achuan@achuan.io         # 网站管理员邮箱，可填可不填
    DocumentRoot &quot;/var/www/chenbtpig&quot;    # 网站根目录
    ServerName chenchen1112.cn           # 域名
    &amp;lt;Directory &quot;/var/www/chenbtpig&quot;&amp;gt;	 # 网站根目录权限设置
        Options Indexes FollowSymLinks   # 禁止显示Apache目录
        AllowOverride All				 # 允许重写apache默认配置
        Order allow,deny				 # 允许所有
        Allow from all
    &amp;lt;/Directory&amp;gt;
    Errorlog &quot;logs/chenchen1112.cn-error.log&quot;   # 网站错误日志
    CustomLog &quot;logs/chenchen1112.cn-access.log&quot; common   # 网站访问日志
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin achuan@achuan.io
    DocumentRoot &quot;/var/www/code_rain&quot;
    ServerName lmissyou.club
    &amp;lt;Directory &quot;/var/www/code_rain&quot;&amp;gt;
        Options Indexes FollowSymLinks
        AllowOverride All
        Order allow,deny
        Allow from all
    &amp;lt;/Directory&amp;gt;
    Errorlog &quot;logs/lmissyou.club-errpr.log&quot;
    CustomLog &quot;logs/lmissyou.club-access.log&quot; common
&amp;lt;/VirtualHost&amp;gt;

# 打开apache配置文件并写入“Include httpd.conf”
$sudo vim /etc/apache2/apache2.conf

# 修改hosts /etc/hosts
$ sudo vi /etc/hosts
# 写入　IP与域名
# 139.199.105.72 www.chenchen.1112.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;网站首页的优先级&quot;&gt;网站首页的优先级&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#用于VirtualHost括号内，优先级从左往右依次降低
DirectoryIndex index.php index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;错误日志&quot;&gt;错误日志&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 用于VirtualHost括号内，在apache配置目录应有logs文件夹，没有自己创建
Errorlog &quot;logs/chenchen1112.cn-error.log&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;访问日志&quot;&gt;访问日志&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CustomLog &quot;logs/chenchen1112.cn-access.log&quot; common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;错误页面的显示&quot;&gt;错误页面的显示&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ErrorDocument 404/missing.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装php56&quot;&gt;安装php5.6&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 添加PPA源
$ sudo add-apt-repository ppa:ondrej/php
# 若报错或没有发现命令则执行　$ sudo apt-get install python-software-properties
# 习惯性的更新源...
$ sudo apt-get update
# 安装php5.6
$ sudo apt-get install php5.6
# 验证版本
$ sudo php -v apache2.conf文件，这个文件通过包含其他配置文件涵盖了所 让我们写个试试？

# 进入www并创建新文件index.php
$ cd /var/www &amp;amp;&amp;amp; sudo vi index.php
# 写入到index.php	
&amp;lt;?php
phpinfo();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置php&quot;&gt;配置php&lt;/h3&gt;
&lt;p&gt;ubuntu serverd的php配置文件在 /etc/php/5.6/apache2/php.ini&lt;br /&gt;
近期发现php的时区是GMT（格林威治平时），而不是GMT+8（东八区）它们的显示时间会相差8个小时，这怎么行！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 打开php.ini配置文件
$ sudo vi /etc/php/5.6/apache2/php.ini
# 找到 date.timezone 并赋值 PRC（中华人民共和国英文缩写） date.timezone = PRC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入我的公网ip查看一下&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/images/2018-11-08-Ubuntu-Deployment/phpinfo.png&quot; alt=&quot;Alt text&quot; title=&quot;php5.6安装成功！Cheers!&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装mysql&quot;&gt;安装mysql&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 习惯性的更新源...
$ sudo apt-get update
# 安装mysql服务器与客户端，安装时会有两次交互，关于mysql密码的设置
$ sudo apt-get install mysql-server mysql-client

# 查看安装是否成功
$ sudo netstat -tap | grep mysql

root@VM-22-96-ubuntu:/etc/mysql/mysql.conf.d# sudo netstat -tap | grep mysql
tcp6       0      0 [::]:mysql              [::]:*                  LISTEN      7818/mysqld   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置mysql&quot;&gt;配置mysql&lt;/h3&gt;
&lt;p&gt;启动mysql的两种姿势&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /etc/init.d/mysql start
# 或
$ sudo service mysql star
# [start] [restart] [stop] [status]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程连接mysql&quot;&gt;远程连接mysql&lt;/h4&gt;
&lt;p&gt;ubuntu serverd的mysql配置文件在 /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 修改配置文件的端口绑定	
$ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf
# 注释掉 bind-adress = 127.0.0.1
# 进入数据库
$ mysql -u root -p
# 选择使用的数据库
mysql&amp;gt; use mysql;
# 修改host值（以通配符 % 增加主机/IP地址）当然你可以可以直接增加IP
mysql&amp;gt; update user set host = &#39;%&#39; where user = &#39;root&#39;;
# 让权限立即生效
mysql&amp;gt; flush privileges;
# 查看修改是否成功　**%         | root**说明远程连接已经开启 
mysql&amp;gt; select host, user from user;
+-----------+------------------+
| host      | user             |
+-----------+------------------+
| %         | root             |
| localhost | debian-sys-maint |
| localhost | mysql.session    |
| localhost | mysql.sys        |
| localhost | root             |
+-----------+------------------+


# 如下连接成功！

achuan@achuan-pc:/etc/apache2$ mysql -h 139.199.105.72 -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 6
Server version: 5.7.24-0ubuntu0.16.04.1 (Ubuntu)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修改数据库编码&quot;&gt;修改数据库编码&lt;/h4&gt;
&lt;p&gt;由于mysql默认编码为latin，如果不修改的话中文会导致数据库乱码报错，所以我们要修改为utf8&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 打开my.cnf配置文件
$ sudo vi /etc/mysql/my.cnf
# 写入以下代码

[mysqld]
character-set-server = utf8
[client]
default-character-set = utf8
[mysql]
default-character-set = utf8

# 查看数据库编码
mysql&amp;gt; show variables like &#39;%char%&#39;;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装phpmyadmin&quot;&gt;安装phpmyadmin&lt;/h3&gt;
&lt;p&gt;不必要的情况下我还是喜欢可视化的操作mysql，开源的phpmyadmin就很不错！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 习惯性的更新源...
$ sudo apt-get update
# 安装phpmyadmin
$ sudo apt-get install phpmyadmin
# 虽然我们安装好了，但是phpmyadmin基于php环境开发的，所以我们需要把它放到网站的根目录/var/www，我这里在网站的根目录下放了一个软连接。
$ sudo ln -s /usr/share/phpmyadmin /var/www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入网址即可： http://localhost/phpmyadmin&lt;/p&gt;

&lt;p&gt;这次部署Ubuntu Server体会不少，我真是越来越喜欢linux了，它真是一个非常有魅力的系统！哈哈哈，到这里吧，太晚了要回寝室睡觉了–&lt;br /&gt;
本篇文章如有写的不足之处，还请您多多指教！88！&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>解决ubuntu：E：无法获得锁(11：资源暂时不可用)</title>
        <link>https://www.achuan.io/index.html/2018-10-25-ubuntu-lock.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-10-25-ubuntu-lock.html</guid>
        <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;最近学习用到了&lt;a href=&quot;http://php.net/&quot;&gt;php手册&lt;/a&gt;，平常我都是在网页查看，图个方便于是就下载了&lt;a href=&quot;https://github.com/gyunaev/kchmviewer&quot;&gt;KchmViewer&lt;/a&gt;（开源的CHM 阅读器）不过效果不太理想，今天想卸载了它，结果出段小插曲……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/images/2018-10-25-ubuntu-lock/1.png&quot; alt=&quot;Alt text&quot; title=&quot;E: 无法获得锁......(11: 资源暂时不可用&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E: 无法获得锁 /var/lib/dpkg/lock-frontend - open (11: 资源暂时不可用)&lt;/strong&gt;&lt;br /&gt;
what the?&lt;br /&gt;
好吧，遇到问题解决问题&lt;/p&gt;

&lt;p&gt;刚开始我是以为软件没有完全关闭就打开了终端……&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# 打开终端列出进程，找含有 apt-get 进程，然后　sudo kill PID
	$ ps aux 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我以为ojbk　？不过这并没有什么用（啪）……&lt;/p&gt;

&lt;p&gt;这有什么难的？so easy　解决方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# 首先强制解锁
	$ sudo rm /var/cache/apt/archives/lock
	# 然后找到错误信息里“无法获得锁的地址”并 rm
	$ sudo rm /var/lib/dpkg/lock-frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;卸载 KchmViewer 并确认卸载（Y）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$ apt-get remove kchmviewer 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/images/2018-10-25-ubuntu-lock/2.png&quot; alt=&quot;Alt text&quot; title=&quot;删除成功！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;dpkg 查一下 kchmviewer 是否存在&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$ dpkg -s kchmviewer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/images/2018-10-25-ubuntu-lock/3.png&quot; alt=&quot;Alt text&quot; title=&quot;系统没有安装包kchmviewer&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>(转)论胡编乱造的写作技巧</title>
        <link>https://www.achuan.io/index.html/2018-10-24-theory-of-means.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-10-24-theory-of-means.html</guid>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;本文转自廖雪峰的博客，原文链接：&lt;a href=&quot;https://www.liaoxuefeng.com/article/00146535933727317d2dbef5b5d4ac896f07ad36f5c3a2f000&quot;&gt;https://www.liaoxuefeng.com/article/00146535933727317d2dbef5b5d4ac896f07ad36f5c3a2f000&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/images/2018-10-24-theory-of-means/theory-of-maens.jpeg&quot; alt=&quot;Alt text&quot; title=&quot;编，我看你编......&quot; /&gt;&lt;br /&gt;
今天给正在上小学二年级的女儿听写语文课文的词语时，发现有一篇课文讲的是爱迪生救妈妈的故事，大意就是爱迪生7岁那年，妈妈得了阑尾炎，医生在他家里准备给妈妈做手术，因为油灯的灯光太暗做不了，于是爱迪生想出了一个好办法：他找来很多镜子，把光聚在一起，让医生顺利地进行了手术。&lt;/p&gt;

&lt;p&gt;这个故事的意义是说爱迪生从小聪明过人，肯动脑筋，不过我越读感觉这个故事越假，在家里做阑尾手术这医生胆子也够大的。于是本着实事求是的精神，上网考证了一番，发现这个故事漏洞百出。&lt;/p&gt;

&lt;p&gt;首先，根据维基百科的记载，爱迪生出生于1847年，7岁那年是1854年，这么早的年份，到底能不能做阑尾炎手术呢？&lt;/p&gt;

&lt;p&gt;答案是：不能。&lt;/p&gt;

&lt;p&gt;因为根据医学资料记载，历史上最早使用“阑尾炎”的医生是美国人菲兹，他于1843年出生，也就是比爱迪生大4岁，爱迪生7岁那年他11岁，青春期才刚开始，呵呵。&lt;/p&gt;

&lt;p&gt;菲兹提出应该用手术切除阑尾是在1886年，那一年爱迪生39岁，菲兹43岁。而且，菲兹不是外科医生，所以，第一例真正成功的阑尾手术是1887年由费城外科医生毛顿做的。&lt;/p&gt;

&lt;p&gt;由于爱迪生没有发明过时光穿梭机，因此我们断定，该故事完全属于编造。&lt;/p&gt;

&lt;p&gt;我们总是说文章源于生活而高于生活，对生活进行一定程度的“加工”是可以的，但是加工前作者最好能有一点点基本的科学知识。如果硬要胡编乱造，我个人有两点心得体会：&lt;/p&gt;

&lt;p&gt;一种是写“很久很久以前，有一头大怪兽……”，神话故事，随便编。&lt;/p&gt;

&lt;p&gt;另一种是写“公元3017年，抵抗外星人的战争已经进入了第9个年头……”，科幻故事，也随便编。&lt;/p&gt;

&lt;p&gt;除此之外，故事里提到的人物、时间、事件，最好能用搜索引擎简单验证一下。&lt;/p&gt;

&lt;p&gt;不过值得欣慰的是，作者没有写电灯而是油灯，说明作者对爱迪生发明了电灯还是略知一二的：7岁的爱迪生尚未发明电灯。&lt;/p&gt;

&lt;p&gt;但我还是希望人教出版社能把这篇编造的课文从语文书里面删了，一是因为欺骗小孩子总是不好的，二是这篇文章暴露了人教社编辑的知识水平实在有限，出于面子的原因，也应该在再版时尽快删除。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>更换了域名、邮箱并修复了移动端bug</title>
        <link>https://www.achuan.io/index.html/2018-10-21-domain-name.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-10-21-domain-name.html</guid>
        <pubDate>Sun, 21 Oct 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt; 更换域名这件事我想了好久，原使用&lt;a href=&quot;https://zh.wikipedia.org/wiki/GitHub&quot;&gt;Github&lt;/a&gt;的三级域名但它太长，本来想换achuan&lt;a href=&quot;https://zh.wikipedia.org/wiki/.com&quot;&gt;.com&lt;/a&gt;不过早就被注册了，卖方叫价太高了，没有5000谈判都碰不着。ahuan&lt;a href=&quot;https://zh.wikipedia.org/wiki/.cn&quot;&gt;.cn&lt;/a&gt;也是早已注册，人家买了域名都不解析挂着玩，也联系过人家，不过人家不回消息。&lt;a href=&quot;https://zh.wikipedia.org/wiki/.net&quot;&gt;.net&lt;/a&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/.me&quot;&gt;.me&lt;/a&gt; 都没了。偶然我了解到“&lt;a href=&quot;https://zh.wikipedia.org/wiki/.io&quot;&gt;.io&lt;/a&gt;”，它是一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC&quot;&gt;国别域名&lt;/a&gt;，同时，它还可被理解为[inputoutput]即“输入输出接口”之意。“io”看着是是不是有点像二进制的“0 与 1”！感觉很有技术内涵，而且近几年.io在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE&quot;&gt;区块链&lt;/a&gt;方面比较火，我感觉用来搭建技术博客也是不错的选择。&lt;br /&gt;
 在选择域名商我也是非常纠结，.io后缀国内域名商几乎是没有的，主要是不能备案，毕竟这是国别后域名，估计不会开放备案。国内不行那就国外吧，怎么要有免费的隐私保护、网站访问速度正常、支付方式、域名价，格至于客服响应、稳定性那都是必须的。&lt;br /&gt;
 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynadot&quot;&gt;dynadot&lt;/a&gt;是我一个想到的，这家伙有大量的骚东西，特殊后缀域名&lt;a href=&quot;https://www.dynadot.com/zh/domain/love.html&quot;&gt;.love&lt;/a&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/.io&quot;&gt;.blog&lt;/a&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/.io&quot;&gt;.wiki&lt;/a&gt; 等…说一下它的一些服务吧，购买域名即送终身隐私保护，但我也不是什么明星大腕，隐私保护自然用不到，&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynadot&quot;&gt;dynadot&lt;/a&gt;所有域名都赠送终身免费的隐私保护，&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynadot&quot;&gt;dynadot&lt;/a&gt;网站自带各国域名很多种，自然有中文，而且在北京设立有分公司，国内网站速度打开正常并且支持支付宝，解析稳定这都不用说，虽然这家口碑不是理想中的那么好，但是跑路估计是不存在的，至于转出暂时我没试过不知道，唯一就是感觉这家&lt;a href=&quot;https://zh.wikipedia.org/wiki/.io&quot;&gt;.io&lt;/a&gt;价格有点高 $29。&lt;br /&gt;
 &lt;a href=&quot;https://zh.wikipedia.org/wiki/.io&quot;&gt;Namesilo&lt;/a&gt;也不错，号称全球最便宜，收费透明且支付支付宝，不过国内访问注册都过不了，翻墙就不至于了，不多考虑。&lt;a href=&quot;https://www.namecheap.com/&quot;&gt;Namecheap&lt;/a&gt;呢价格上不算便宜，但是各方面做的不错，不限于速度、稳定性、免费的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&quot;&gt;SSL&lt;/a&gt;、客服响应等等、但是它不支持支付宝。至于&lt;a href=&quot;https://zh.wikipedia.org/wiki/GoDaddy&quot;&gt;GoDaddy&lt;/a&gt;，虽然最为业界的NO 1，但是在网上查看那些相关新闻评论，看我的我不想买了都，虽然它有中文、支持支付宝、国内访问还算凑合。但是pass。&lt;br /&gt;
 考虑了半天想想还是用“挑兵挑将”来选择吧 天选之商 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynadot&quot;&gt;dynadot&lt;/a&gt; 胜出….下了订单$29，吃土吧，快乐并痛苦着…买后即用，不用备案是真爽，进去NDS设置一下，ping achuanya.github.io获取IP，然后添加主域名&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8&quot;&gt;A记录&lt;/a&gt; 185.199.109.153，子域名 www &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8&quot;&gt;A记录&lt;/a&gt;随主域名。更换了域名，邮箱也改一下吧，&lt;a href=&quot;http://ym.163.com/&quot;&gt;网易企业邮箱&lt;/a&gt;免费，添加 &lt;a href=&quot;https://zh.wikipedia.org/wiki/MX%E8%AE%B0%E5%BD%95&quot;&gt;MX记录&lt;/a&gt; mx.ym.163.com 优先级10（邮箱：&lt;a href=&quot;mailto:achuan@achuan.io&quot;&gt;achuan@achuan.io&lt;/a&gt;），访问 achuan.io 完全ojbk。&lt;br /&gt;
 除了域名\邮箱也没闲着，修改了博客移动端的一些bug：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;输入域名后自动进入主页且不能退回到文章栏。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 移动端增加了一项功能：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;增加返回菜单栏按钮。&lt;/li&gt;
&lt;/ul&gt;

</description>
      </item>
    
      <item>
        <title>开源分布式管理控制系统——Git笔记</title>
        <link>https://www.achuan.io/index.html/2018-10-14-git.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-10-14-git.html</guid>
        <pubDate>Sun, 14 Oct 2018 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;git的诞生&quot;&gt;Git的诞生&lt;/h2&gt;
&lt;p&gt; 故事是自2002年开始，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&quot;&gt;林纳斯·托瓦兹&lt;/a&gt;决定使用&lt;a href=&quot;https://zh.wikipedia.org/wiki/BitKeeper&quot;&gt;BitKeeper&lt;/a&gt;作为&lt;a href=&quot;https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8&quot;&gt;Linux内核&lt;/a&gt;版本控制系统，用于维护代码。你想想BitKeeper是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%93%E6%9C%89%E8%BD%AF%E4%BB%B6&quot;&gt;专有软件&lt;/a&gt;，人家靠这玩意挣钱，这个决定社群中长期遭受质疑。不过还是有人主张使用开源软件。我dalao（林纳斯·托瓦兹）何尝没有想过（如&lt;a href=&quot;https://zh.wikipedia.org/wiki/Monotone&quot;&gt;Monotone&lt;/a&gt;），但是这些软件都存在一些问题，特别是性能不佳。现成的方案，如&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%94%E4%BD%9C%E7%89%88%E6%9C%AC%E7%B3%BB%E7%B5%B1&quot;&gt;CVS&lt;/a&gt;的架构，不过dalao并不喜欢连同痛批了一顿。&lt;br /&gt;
 2005年的时候有个叫&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%89%E5%BE%B7%E9%AD%AF%C2%B7%E5%9E%82%E9%B3%A9&quot;&gt;安德鲁·垂鸠&lt;/a&gt;破解了BitKeeper（这么做的不止他一个），BitMover公司决定收回Linux社区的免费使用权。事后双方公司进行过磋商，结果可想而知。事后dalao以十天的时间，用C撸出来一个分布式版本控制系统，它就是Git的第一个版本！于2005年以&lt;a href=&quot;https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81&quot;&gt;GPL&lt;/a&gt;发布。至于这个名字嘛，dalao自嘲地取了这个名字“&lt;strong&gt;Git&lt;/strong&gt;”，该词源自英国俚语，意思大约是“混账”。不过Git刚面世的时候，世界上开源社群反对声音不少，最大的理由是Git太艰涩难懂？（博主：一个程序员难道不该有钻研精神吗？）&lt;br /&gt;
 2016年IT界报道，Git统治编程社区11年后，BitKeeper宣布开源。挑战Linux内核开发者？dalao反手一掏Git灭掉BitMover。（这段让我看的热血沸腾，抽颗烟压压惊）&lt;/p&gt;

&lt;p&gt;在学习之前我门先学习一下四个专业术语&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/Git%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg&quot; alt=&quot;Alt text&quot; title=&quot;Git数据流程图&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Workspace&lt;/strong&gt;：工作区&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lndex/Stage&lt;/strong&gt;：暂存区（又名索引）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Repository&lt;/strong&gt;：仓库区（又名本地仓库、储存库）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remote&lt;/strong&gt;：远程仓库
开源分布式管理控制系统——Git笔记
开源分布式管理控制系统——Git笔记是工作区。&lt;br /&gt;
开源分布式管理控制系统——Git笔记态。&lt;br /&gt;
开源分布式管理控制系统——Git笔记库）。&lt;br /&gt;
 远程仓库：这个很简单但我却不知道怎么表达…可以说成云端仓库吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主要功能&quot;&gt;主要功能&lt;/h2&gt;
&lt;p&gt; Git主要用于Linux内核开发的版本控制系统，与&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%94%E4%BD%9C%E7%89%88%E6%9C%AC%E7%B3%BB%E7%B5%B1&quot;&gt;CVS&lt;/a&gt;或&lt;a href=&quot;https://zh.wikipedia.org/wiki/Subversion&quot;&gt;Subversion&lt;/a&gt;这一类集中式版本控制系统的不同采用了分布式版本。它没有服务器端，就可以运行版本控制，这使得源码的发布与修改极其方便。git速度也是很给力。&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;
&lt;p&gt; Git和其他版本控制系统（如&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%94%E4%BD%9C%E7%89%88%E6%9C%AC%E7%B3%BB%E7%B5%B1&quot;&gt;CVS&lt;/a&gt;）有不少的差别，Git本身关心文件的整体性是否有改变，但多数的版本控制系统如&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%94%E4%BD%9C%E7%89%88%E6%9C%AC%E7%B3%BB%E7%B5%B1&quot;&gt;CVS&lt;/a&gt;或&lt;a href=&quot;https://zh.wikipedia.org/wiki/Subversion&quot;&gt;Subversion&lt;/a&gt;系统则在乎文件内容的差异。&lt;br /&gt;
我觉得Git更像一个文件系统，直接在本机上获取数据，不必连线到主机端获取数据。 每个开发者都可有全部开发历史的本地副本，changes从这种本地repository复制给其他开发者。这些changes作为新增的分支被导入，可以与本地分支合并。&lt;br /&gt;
Git是用C语言开发的，以追求最高的性能。Git自动完成&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&quot;&gt;垃圾回收&lt;/a&gt;（也可以用 git gc –prune 调用）。&lt;br /&gt;
Git服务器典型的TCP监听，端口为9418。&lt;/p&gt;

&lt;h2 id=&quot;git的安装&quot;&gt;Git的安装&lt;/h2&gt;
&lt;p&gt; Git平台支持有&lt;a href=&quot;https://zh.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/Microsoft_Windows&quot;&gt;Windows&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/MacOS&quot;&gt;OS X&lt;/a&gt;，不过今天我们重点讲Linux。&lt;br /&gt;
Git安装有许多种，主要分为两种：通过编译源代码、平台预编译安装包，源代码安装至少可以安装最新版本，不过Git慢慢壮大，不会出现安装包版本落后问题，这里也就不说了。&lt;br /&gt;
   
在装软件之前我都会习惯的更新源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;基于二进制安装Git&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ sudo yum install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ubuntu发行版&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ sudo apt-get install  git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看Git当前版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ git version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;初始化仓库&quot;&gt;初始化仓库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 初始化当前目录为仓库
    $ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;克隆到本地仓库&quot;&gt;克隆到本地仓库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #　第二个参数克隆到指定目录，可带可不带
    $ git clone [项目链接] [指定本地目录]
    # 帮助
    $ git clone -h ## 增加/删除文件

    # 提交新文件（new）和被修改（modified）文件，不包括被删除（deleted）文件
    $ git add .
    # 提交新文件（new）和已被删除（deleted）文件，不包括新文件
    $ git add -u
    # 提交所有变化。cunz
    $ git add -A
    # 提交当前目录.png后缀文件
    $　git add *png
    # 帮助
    $ git add -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;检查工作目录暂存区状态&quot;&gt;检查工作目录/暂存区状态&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 检查工作目录与暂存区的状态
    $ git status
    # 只列出已被Git管理且被修改没提交的文件
    $ git status -uno
    # 帮助
    $ git status -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;添加到远程仓库&quot;&gt;添加到远程仓库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 当新文件添加到暂存区后，我们现在就准备创建第一个提交与注释了，不过在这之前我们要绑定Git账户
    $ git config --global user.name &quot;achuanya&quot;
    $ git config --global user.email &quot;achuan@achuan.io&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;提交代码并注释&quot;&gt;提交代码并注释&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ git commit -m &quot;这是一个测试&quot;
    # 参数：
            -a      # 自动检测修改文件
            -m      # 提交
    # 帮助。
    $ git commit -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查看日志详情&quot;&gt;查看日志详情&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 显示当前分支的版本历史
    $ git log
    # 显示commit历史，以及每次commit发生变化的文件
    $ git log --stat
    # 搜索提交历史，根据关键词
    $ git log -S [key Word]
    # 显示某个文件的版本历史，包括文件改名
    $ git log --follow [file]
    # 显示过去的5次提交
    $ git log -5 --pretty --oneline
    # 帮助
    $ git log -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;提交到远程仓库&quot;&gt;提交到远程仓库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 提交到远程仓库，master即为分支
    $ git push origin master
    # 强行提交
    $ git push -u origin master
    # 上传本地指定分支到远程仓库（分支操作后面会说到）
    $ git push [remote] [branch]
    # 推送所有分支到远程仓库
    $ git push [remote] --all
    # 强行推送当前指定分支到远程仓库（即使有冲突）
    $ git push [remote] --force
    # 帮助
    $ git push -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;移动重命名与删除文件&quot;&gt;移动、重命名与删除文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 移动与重命名道理是一样的
    $ git mv ![Alt text](https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/rename.png &quot;重命名操作&quot;)

    # 继linux命令一样。
    $ git rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;撤销修改切换分支&quot;&gt;撤销修改/切换分支&lt;/h2&gt;
&lt;p&gt; git checkout 主要用于撤销修改或切换分支，它是一条较为常用的的命令，同时也很危险，因为这条命令会重新工作区！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 恢复修改过的指定文件到工作区
    $ git checkout [branch Name]
    # 恢复暂存区所有文件到工作区
    $ git checkout .
    # 新建一个分支，并切换到该分支（切换分支不带参数 -b）
    $ git checkout -b [name]
    # 切换到上一个分支
    $ git checkout -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;管理分支&quot;&gt;管理分支&lt;/h2&gt;
&lt;p&gt; Git分支，好比一包零食，你可以选择和其他小伙伴一起吃一包，也可以自己吃一包，他们吃他们的，你吃你的相互之间没有影响，作为这包零食的主人，你也可以随时可以让两包零食放在一起（合并）。
​      &lt;br /&gt;
        # 现在让我们创建一包零食，不不不…一个新分支
        $ git branch [name]
        # 查看本地所有分支（当前分支前有个 * 号）
        $ git branch
        # 查看远程分支
        $ git branch -r
        # 查看本地和远程所有分支
        $ git branch -a
        # 重命名分支
        $ git branch -m [name] [modify Name]
        # 删除分支（ -D 强行删除）
        $ git branch -d [name]
        注：删除远程分支需要 git push 操作
        $ git push origin :[name]
        ######################### 合并分支&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 把现有demo分支合并到master上
    $ git metge [branch Name]

    root@achuan-pc:/home/github/demo# git branch
    demo
    * master
    root@achuan-pc:/home/github/demo# git merge demo
    Updating d46f35e..b17d20e
    Fast-forward
    README.txt | 1 +
    1 file changed, 1 insertion(+)

    # 注意上面的合并信息 fasht-forward 意思是这次合并是快进模式，也就是直接吧master指向demo的当前提交，所以合并速度非常快。 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git常用命令&quot;&gt;Git常用命令&lt;/h2&gt;
&lt;p&gt; 上面说的都是一些基本操作，下面也是一些常用命令，出于个人用途可能存在有些命令不全面，不过我往后学习中会进行添加，还请见谅。&lt;/p&gt;

&lt;h3 id=&quot;查看信息&quot;&gt;查看信息&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 显示所有提交过的用户，按提交次数排序
    $ git shortlog -sn
    # 显示指定文件是什么人在什么时间修改过
    $ git blame [file]
    # 显示暂存区和工作区的差异
    $ git diff
    # 显示暂存区和上一个commit的差异
    $ git diff --cached [file]
    # 显示工作区与当前分支最新commit之间的差异
    $ git diff HEAD
    # 显示两次提交之间的差异
    $ git diff [first Branch]...[second Branch]
    # 显示今天你写了多少行代码
    $ git diff --shortstat &quot;@{0 day ago}&quot;
    # 显示某次提交的元数据和内容变化
    $ git show [commit]
    # 显示某次提交发生变化的文件
    $ git show --name-only [commit]
    # 显示某次提交时，某个文件的内容
    $ git show [commit]:[filename]
    # 显示当前分支的最近几次提交
    $ git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;远程仓库的一些操作&quot;&gt;远程仓库的一些操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 下载远程仓库的所有变动
    $ git fetch [remore Name]
    # 跟踪存储库，不带参数，列出已存在的远程分支。
    $ git remote
    # 显示所有远程仓库
    $ git remote -v
    # 显示某个远程仓库的信息
    $ gitremote shou [remote Name]
    # 添加一个新的远程仓库，并命名
    $ git remote add [shortname][url]
    # 取远程仓库与本地分支合并  
    $ git pull [remote] [branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;拓展知识&quot;&gt;拓展知识&lt;/h2&gt;
&lt;h3 id=&quot;克隆下载某项目中的单个文件文件夹&quot;&gt;克隆下载某项目中的单个文件（文件夹）&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    wget https://github.com/acversionuanya/achuanya.github.io/blob/master/README.mdjinxing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;github-chrome插件&quot;&gt;Github Chrome插件&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc/related&quot;&gt;Octotree&lt;/a&gt;，很直观的查看不同级文件夹，也方便进行文件跳转操作。&lt;br /&gt;
&lt;a href=&quot;https://chrome.google.com/webstore/detail/octo-mate/baggcehellihkglakjnmnhpnjmkbmpkf&quot;&gt;Octo Mate&lt;/a&gt;，增强你Githubt体验，它主要功能有四点：一键以.zip格式下载文件、
一键打开项目的Github Pages、显示仓库大小、显示未读消息数。&lt;/p&gt;

&lt;h3 id=&quot;文件状态&quot;&gt;文件状态&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    未跟踪（untrack）：新增加文件。
    已修改（modified）：已修改但为写入到暂存区。
    已暂存（staged）：已经添加到暂存区。
    已提交（committed）：已经添加到远程仓库。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;git专业术语中英文对照表&quot;&gt;Git专业术语中英文对照表&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/gitshuyu.png&quot; alt=&quot;Alt text&quot; title=&quot;Git专业术语中英文对照表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 ok写完了！通过这段时间的学习，关于Git命令我用到的差不多就这么多，可能存在有些命令不全面，不过我往后学习中会进行添加，还请见谅。我现在真高兴当初出写博客这个决定，它让我每天学习都很有动力，有目标。最主要的是能把自己学会的知识分享给大家，也能让这个知识点记的更加牢固。。再过半年就要入职场了，压力也是不小。不过不能让压力阻止我向前跨步！下次文章关于“LAMP/LNMP架构”的相关内容。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>linux命令笔记(长期更新)</title>
        <link>https://www.achuan.io/index.html/2018-09-24-linux-command.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-09-24-linux-command.html</guid>
        <pubDate>Mon, 24 Sep 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt; 今天在写一些刚最近学到&lt;a href=&quot;https://zh.wikipedia.org/zh/Linux&quot;&gt;linux&lt;/a&gt;命令，看到笔记本上记得有点乱重写整理了一下。接触了linux也有近大半年了，越来越离不开它了，windows也是偶尔开一下虚拟机，接触linux这段时间也是受益匪浅，使用windows的时候虽然控制的住网瘾，但是偶尔也想打一把，自从独装了linux直接一棒子打死…挺好的…我也非常喜欢linux命令，它提升了我一些单词量。还让我接触了开源的概念、它的历史,这些我都非常喜欢。   咳咳，关于开源过几天再说吧，进入正题，这些是记的笔记，linux命令虽多，但每个人玩linux的目的固然不同，常用的命令也有差异，当然你也用到它时Google一下。
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cd&quot;&gt;cd&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;切换目录，可以是绝对路径，也可以是相对路径&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd /home/achuan   //切换到目录/achuan/achuan
  cd ./achuan       //切换到当前目录下的achuan目录中，“.”表示当前目录  
  cd ../achuan      //切换到上层目录中的chuan目录中，“..”表示上一层目录
  cd ~              //切换到home
  cd ../..          //切换到目录的上两级
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ls&quot;&gt;ls&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看目录与文件，list之意&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -l  //列出长数据串，包含文件的属性与权限数据等
  -a  //列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）
  -d  //仅列出目录本身，而不是列出目录的文件数据
  -h  //将文件容量以较易读的方式（GB，kB等）列出来
  -R  //连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：这些参数也可以组合使用，下面举两个例子：&lt;/p&gt;

&lt;h2 id=&quot;grep&quot;&gt;grep&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;强大的文本搜索命令，它能使用正则表达式搜索&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -a   //将binary文件以text文件的方式查找数据
  -c   //计算找到‘查找字符串’的次数
  -i   //忽略大小写的区别，即把大小写视为相同
  -v   //反向选择，即显示出没有‘查找字符串’内容的那一行
  # 例如：
     //取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色
  grep --color=auto &#39;MANPATH&#39; /etc/man.config
     //把ls -l的输出中包含字母file（不区分大小写）的内容输出
  ls -l | grep -i file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;find&quot;&gt;find&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于查找文件命令，相对而言，使用复杂，参数多&lt;br /&gt;
  # 与参数有关&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -mtime n   //n为数字，意思为在n天之前的“一天内”被更改过的文件；
  -mtime +n   //列出在n天之前（不含n天本身）被更改过的文件名；
  -mtime -n   //列出在n天之内（含n天本身）被更改过的文件名；
  -newer file   //列出比file还要新的文件名
  # 例如：
  find /root -mtime 0 # 在当前目录下查找今天之内有改动的文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   # 与用户或用户组名有关的参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    -user name   //列出文件所有者为name的文件
    -group name   //列出文件所属用户组为name的文件
    -uid n   //列出文件所有者为用户ID为n的文件
    -gid n   //列出文件所属用户组为用户组ID为n的文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   # 与文件权限及名称有关的参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    -name filename   //找出文件名为filename的文件
    -size [+-]SIZ   //找出比SIZE还要大（+）或小（-）的文件
    -tpye TYPE   //查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b---术、c）、
                   目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；class phone{
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cp&quot;&gt;cp&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于复制文件，还可以把多个文件一次性复制到一个目录下&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -a   //将文件的特性一起复制
  -p   //连同文件的属性一起复制，而非使用默认方式，与-a相似（常用于备份）
  -i   //若目标文件已经存在时，在覆盖时会先询问操作的进行
  -r   //递归持续复制，用于目录的复制行为
  -u   //目标文件与源文件有差异时才会复制
  # 例如：
  cp -a aa aab   //连同文件的所有特性把文件aa复制成文件aab
  cp aa aab aabb achuan   //把文件aa、aab、aabb复制到目录achuan中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mv&quot;&gt;mv&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于移动文件、目录或更名，move之意&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -f   //force强制的意思，如果目标文件已经存在，不会询问而直接覆盖
  -i   //若目标文件已经存在，就会询问是否覆盖
  -u   //若目标文件已经存在，且比目标文件新，才会更新
  注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。
  # 例如：
  mv aa aab aabb achuan   //把文件aa、aab、aabb移动到目录achuan中
  mv aa aab   //把文件aa重命名为aab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rm&quot;&gt;rm&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于删除文件或目录，remove之间（数据无价，操作需谨慎！！！）&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -f   //就是force的意思，忽略不存在的文件，不会出现警告消息
  -i   //互动模式，在删除前会询问用户是否操作
  -r   //递归删除，最常用于目录删除，它是一个非常危险的参数
  # 例如：
  rm -i achuan   //删除文件achuan，在删除之前会询问是否进行该操作
  rm -fr achuan  //强制删除目录achuan中的所有文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ps&quot;&gt;ps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于某个时间点的进程运行情况选取下来并输出，process之意&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -A   //所有的进程均显示出来
  -a   //不与terminal有关的所有进程
  -u   //有效用户的相关进程
  -x   //一般与a参数一起使用，可列出较完整的信息
  -l   //较长，较详细地将PID的信息列出
    
  用到不多，记住一般使用命令参数搭配即可 # 例如：
  ps aux   //查看系统所有的进程数据
  ps ax   //查看不与terminal有关的所有进程
  ps -lA   //查看系统所有的进程数据
  ps axjf   //查看连同一部分进程树状态
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kill&quot;&gt;kill&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于向某个工作或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，# 例如：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  kill -signal PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;signal的常用参数如下：&lt;br /&gt;
注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    1：SIGHUP   //启动被终止的进程
    2：SIGINT   //相当于输入ctrl+c，中断一个程序的进行
    9：SIGKILL   //强制中断一个进程的进行
    15：SIGTERM   //以正常的结束进程方式来终止进程
    17：SIGSTOP   //相当于输入ctrl+z，暂停一个进程的进行
    # 例如：
       //以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程
    kill -SIGTERM %1 
       //重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得
    kill -SIGHUP PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;file&quot;&gt;file&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于判断file命令后的文件的基本数据，因为在linux下文件的类型并不是以后缀分的，这个命令显得非常有用，语法so easy&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  file filename
  # 例如：
  file ./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tar&quot;&gt;tar&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;命令用于对文件进行打包，默认情况并不会压缩，如果指定相应的参数，还会调用相应的压缩程序（gzip和bzip等）进行压缩和解压&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -c   //新建打包文件
  -t   //查看打包文件的内容含有哪些文件名
  -x   //解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中
  -j   //通过bzip2的支持进行压缩/解压缩
  -z   //通过gzip的支持进行压缩/解压缩
  -v   //在压缩/解压缩过程中，将正在处理的文件名显示出来
  -f filename   //filename为要处理的文件
  -C achuan   //指定压缩/解压缩的目录achuan

  命令有点多哈，但是通常我们只需要记住下面三条命令即可：
  压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称
  查询：tar -jtv -f filename.tar.bz2
  解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chgrp&quot;&gt;chgrp&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于改变文件所属用户组&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  chgrp [-R] dirname/filename
  -R   //进行递归的持续对所有文件和子目录更改
  # 例如：
  chgrp users -R ./achuan   //递归地把achuan目录下中的所有文件和子目录下所有文件的用户组修改为users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chmod&quot;&gt;chmod&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用于改变文件或目录的权限，非常重要的命令&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -c   //当发生改变时，报告处理信息
  -f   //错误信息不输出
  -R  //进行递归的持续对所有文件和子目录更改
  -v  //运行时显示详细处
  4或r   //读取权限
  2或w   //写入权限
  1或x   //执行或切换权限
  0或-   //不具任何权限
  s     //特殊权限
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：该命令有两种用法，包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法，在此我只说数字设定法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;说数字设定法
0没有权限，1执行权限，2写权限，4读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # 例如：  
  如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。


  chmod 777 -R achuan   //&quot;achuan&quot;文件或目录
  -R   //进行递归的持续更改，即连同子目录下的所有文件都会更改
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vim&quot;&gt;vim&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;vim命令要用于文本编辑，相比vim的话题不亚于，哪个编程语言更好…不过编辑器，在我看来不过是用哪个会提高我的工作效率，这因人而异。vim里面有很多好用的命令，以后我会单独说它。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gcc&quot;&gt;gcc&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;前段时间学了点C才了解的，它主要用于编译，对于开发C语言的人来说，这是非常重要的命令&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -o   //output之意，用于指定生成一个可执行文件的文件名
  -c   //用于把源文件生成目标文件（.o)，并阻止编译器创建一个完整的程序
  -I   //增加编译时搜索头文件的路径
  -L   //增加编译时搜索静态连接库的路径
  -S   //把源文件生成汇编代码文件
  -lm   //表示标准库的目录中名为libm.a的函数库
  -lpthread   //连接NPTL实现的线程库
  -std=   //用于指定把使用的C语言的版本

  # 例如：
     //把源文件demo1.c按照c99标准编译成可执行程序demo1
  gcc -o demo1 demo1.c -lm -std=c99
     //把源文件demo1.c转换为相应的汇编程序源文件demo1.s
  gcc -S demo1.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shutdown&quot;&gt;shutdown&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*关机、重启命令，经常使用的命令

    -r   //重启
    -n   //杀死所有运行中的程序后自动关机
    -f   //关机时，不进行磁盘检测
    -f   //关机时，进行磁盘检测
    -c   //取消目前已经进行中的关机动作
    # 例如：
    shutdown -r now   //立即重启
    shutdown now   //立即关机
    shutdown +5 now  //5分钟后关机
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;init是所有进程的祖先，它们的进程号始为1.所以发送TERM信号给init会终止所有的用户进程，守护进程等，shutdown就是使用这种机制，init定义了8个运行级别（runleve），inti 0 关机，init 1 重启……关于init就到这了。就不长篇大论了。&lt;/p&gt;

&lt;p&gt;暂且到这里，欲知后续如何，请看下回分解&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/4.gif&quot; alt=&quot;Alt text&quot; title=&quot;跑&quot; /&gt;。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>面向对象(Object Oriented)学习笔记（一）</title>
        <link>https://www.achuan.io/index.html/2018-09-23-Object_oriented.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-09-23-Object_oriented.html</guid>
        <pubDate>Sun, 23 Sep 2018 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;一-面向对象oop的发展历程&quot;&gt;一. 面向对象(OOP)的发展历程&lt;/h2&gt;
&lt;h3 id=&quot;1-oop的诞生&quot;&gt;1. OOP的诞生&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Simula&quot;&gt;&lt;strong&gt;Simulaq&lt;/strong&gt;&lt;/a&gt;面向对象技术最早是在编程语言Simual中提出，1967年2月20日，在挪威奥斯陆郊外的小镇莉沙布举行的IFIP TC-2 工作会议上，挪威科学家Ole-Johan Dahl和Kristen Nygaard正式发布了Simula 67语言。Simula 67，是面向对象的开山祖师，它引入了所有后来面向对象程序设计语言所遵循的基础概念：对象、类、继承，但它的实现并不是很完整。后来&lt;a href=&quot;https://zh.wikipedia.org/wiki/Smalltalk&quot;&gt;&lt;strong&gt;Smalltalk&lt;/strong&gt;&lt;/a&gt;的诞生，第二个面向对象的程序语言的出现，而且是第一个完整实现了面向对象技术的语言，和第一个真正的集成开发环境(IED)。&lt;/p&gt;

&lt;h2 id=&quot;二-面向对象oop的概念&quot;&gt;二. 面向对象(OOP)的概念&lt;/h2&gt;
&lt;p&gt;OOP达到了软件工程的三个目标&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;重用性&lt;/strong&gt;、&lt;strong&gt;灵活性&lt;/strong&gt;、&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三-oop三大特征&quot;&gt;三. OOP三大特征&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;封装(Encapsulation)：对外部不可见&lt;/li&gt;
  &lt;li&gt;继承(Inheritance)：扩展类的功能&lt;/li&gt;
  &lt;li&gt;多态(Polymorphism)：对象的重载、对象的多态性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四-类与对象&quot;&gt;四. 类与对象&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;类是对某一类事物的描述，是抽象的、概念上实际存在的该类事物的每个个体，因而也称实例(instance)，换种方法解释类就像一个具体的事物，一个对象，用编程代码来描述出来，&lt;/li&gt;
  &lt;li&gt;对象，简单的来说对象是可以使用的，而类只是对这件事物进行描述，它不能使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;五-类与对象的关系&quot;&gt;五. 类与对象的关系&lt;/h2&gt;
&lt;p&gt;这个我表达能力不太好哈…这样说吧，类就好比工厂车间的模具，而对象就是模具所产生的事物，一个模具是可以产生很多对象&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/1.gif&quot; alt=&quot;Alt text&quot; title=&quot;滑稽&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;六-类的声明与对象的创建及使用&quot;&gt;六. 类的声明与对象的创建及使用&lt;/h2&gt;
&lt;p&gt;好了我们来了解一下怎么找对象，…不..创建对象..&lt;/p&gt;

&lt;h3 id=&quot;1-类的声明&quot;&gt;1. 类的声明&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class 类名称{
        数据类型 属性...             //声明成员变量(属性)

        public 返回值的数据类型 方法名称 (参数1，参数2){  //定义方法
            程序语句..
            [return表达式] }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-对象的创建及使用&quot;&gt;2. 对象的创建及使用:&lt;/h3&gt;
&lt;p&gt;类名称 对象名称 = null;    //声明对象&lt;br /&gt;
对象名称 = new 类名([参数列表]);    //实例化对象&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对象中成员的访问:
$引用名 = new 类名(构造参数);    //对象属性赋值&lt;br /&gt;
$引用名 -&amp;gt; 成员属性 = 赋值;    //输出对象的属性&lt;br /&gt;
$引用名 -&amp;gt; 成员方法(参数);    //调用对象的方法&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;?php
  /*---------------------------------*\
      对象实例化
      //实例化指OOP编程中，类创建对象的过程
  \*---------------------------------*/
  class phone{
      public $width;
      public $height;
      public $size;

      public function call($name){
          echo &quot;正在给{$name}打电话&quot;;}

      public function message($name){
          echo &quot;正在给{$name}发短信&quot;;}
      public function play(){
          echo &quot;正在玩游戏!&quot;;}

      public function info(){
          $this -&amp;gt; play();
          return &quot;&amp;lt;br&amp;gt; 手机的宽度；{$this -&amp;gt; width},&amp;lt;br&amp;gt; 手机的高度；{$this -&amp;gt; height}&quot;;}
  }

  $phone = new phone();
  $phone -&amp;gt; width = &quot;5CM&quot;;
  $phone -&amp;gt; height = &quot;10CM&quot;;

  //$phone -&amp;gt; width = &quot;5CM&quot;; //对象对成员属性的赋值(引用变量时 $ 符可以不写)
  //echo $phone -&amp;gt; width; //与对象取得成员属性存的值
  //$phone1 = new phone();
  //$phone1 -&amp;gt; height = &quot;10CM&quot;;
  //$height = $phone1 -&amp;gt; height;
  //echo $height; 
  //echo $phone1 -&amp;gt; height;

  //$phone1 -&amp;gt; aaaa = &quot;AAAA&quot;;font
  //var_dump(&quot;&amp;lt;br&amp;gt;&quot;,$phone1);
  $phone -&amp;gt; call(&quot;!list&quot;);
  $phone -&amp;gt; call(&quot;&amp;lt;br&amp;gt; tom&quot;);
  echo &quot;&amp;lt;br&amp;gt;&quot;;
  $phone -&amp;gt; play();
  echo $phone -&amp;gt; info();

  ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;呼～ 第一章写完了，我也是近期刚学OOP，可能哪个方面写的并不是很好 嘿嘿，如有写的不足之处，还请您在下方留言&lt;img src=&quot;https://raw.githubusercontent.com/achuanya/achuanya.github.io/master/assets/image/baoquan.gif&quot; alt=&quot;Alt text&quot; title=&quot;抱拳&quot; /&gt;。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>致简写作神器——Markdown</title>
        <link>https://www.achuan.io/index.html/2018-09-03-Markdown.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-09-03-Markdown.html</guid>
        <pubDate>Mon, 03 Sep 2018 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;1-markdown&quot;&gt;1. Markdown？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;是什么？&lt;br /&gt;
Markdown 是由 John Gruber 在2004年创建的「轻量级标记语言」，至今它已经有14岁了！&lt;/p&gt;

&lt;p&gt;Markdown最初的定义&lt;strong&gt;纯文本语法&lt;/strong&gt;。&lt;br /&gt;
设计理念就是易写、易读。
它那么的纯洁、致简、美妙感觉词汇已经不能形容Markdown的美。试着写一写，你也会爱上它。&lt;/p&gt;

&lt;h2 id=&quot;2-markdown-它有哪些优点&quot;&gt;2. Markdown 它有哪些优点？&lt;/h2&gt;

&lt;p&gt;前文说了它的定义与设计理念，易写、易读，无非就是Markdown最大的特点。&lt;/p&gt;

&lt;h3 id=&quot;一-所谓易写&quot;&gt;一. 所谓易写？&lt;/h3&gt;

&lt;p&gt;这里说的易写，是指写作的过程。因为它语法的原因且编辑器实时预览的情况下，差不多全程键盘，基本脱离对鼠标的依赖。这样就可以集中精力放在文章上。因为它语法简单，所以书写错误易发现。&lt;/p&gt;

&lt;h3 id=&quot;二-所谓易读&quot;&gt;二. 所谓易读？&lt;/h3&gt;

&lt;p&gt;所谓易读，可不要理解为&lt;strong&gt;排版之后呈现出来的结果&lt;/strong&gt;，这里的&lt;strong&gt;易读&lt;/strong&gt;是指&lt;strong&gt;源代码文件&lt;/strong&gt;（也就是以 &lt;strong&gt;.md&lt;/strong&gt;;&lt;strong&gt;.markdown&lt;/strong&gt;;&lt;strong&gt;.mdown&lt;/strong&gt; 后缀名的文件）它不会像写Html时那样，满屏幕都是密密麻麻的&lt;标签&gt;与选择器...&lt;/标签&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-markdown的优势与局限&quot;&gt;3. Markdown的优势与局限&lt;/h2&gt;

&lt;p&gt;我们知道Markdown只是一个&lt;轻量级标记语言&gt;，相比xml、html或Word、Pages这类，Markdown在排版的功能上显的弱一点。&lt;/轻量级标记语言&gt;&lt;/p&gt;

&lt;h3 id=&quot;一--markdown无法对段落进行灵活处理&quot;&gt;一.  Markdown无法对段落进行灵活处理&lt;/h3&gt;

&lt;p&gt;在word中，像文本框，图片你可以随意调整它的位置。但Markdown不行，相比Markdown只能线性的对文字进行排版。&lt;/p&gt;

&lt;h3 id=&quot;二-markdown对非纯文本元素的排版能力很差&quot;&gt;二. Markdown对非纯文本元素的排版能力很差&lt;/h3&gt;

&lt;p&gt;一篇文章，如果只有文字的话，总有感觉有点枯燥枯燥，但是Markdown限于纯文本格式，Markdown几乎做不到像Word那样对图片灵活的调整位置。&lt;/p&gt;

&lt;h3 id=&quot;三-markdown专注你的文字内容而不是排版&quot;&gt;三. Markdown专注你的文字内容，而不是排版&lt;/h3&gt;

&lt;p&gt;Markdown不像Word那样花哨，应为语法的缘故吧，感觉它是那么的纯洁，做纯文字处理很棒的，我每次使用Markdown写文章时，有种很美妙的感觉…&lt;/p&gt;
&lt;h2 id=&quot;4-markdown语法与编辑器&quot;&gt;4. Markdown语法与编辑器&lt;/h2&gt;

&lt;p&gt;Markdown语法的目标是：&lt;strong&gt;成为一种使用网络的书写语言&lt;/strong&gt;。&lt;br /&gt;
毕竟我们的易写、易读是有目共睹的，立志做书写语言我们是认真的！&lt;/p&gt;
&lt;h3 id=&quot;retext的安装&quot;&gt;Retext的安装&lt;/h3&gt;
&lt;p&gt;日常我都是用Ubuntu18.04LTS，Markdown编辑器我用的是&lt;a href=&quot;https://pypi.org/project/ReText/&quot;&gt;ReText&lt;/a&gt;，不过windows、Mac也有很多优秀支持Markdown的编辑器，如MarkdownPad、Sublime Text3、Marxico等等…在这里我就不一一介绍了。&lt;/p&gt;

&lt;h4 id=&quot;1-安装&quot;&gt;1. 安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	sudo apt-get install retext

//也可以到官网下载，有deb包。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-配置&quot;&gt;2. 配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//添加数学公式的支持

	sudo apt-get install libjs-mathjax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在”&lt;strong&gt;extensions.txt&lt;/strong&gt;“中添加”&lt;strong&gt;mathjax&lt;/strong&gt;“（没有这个文件创建一个）  `&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	vim .config/markdown-extensions.txt
	//添加：mathjax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ok!  如果需要网页在线编辑器&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot;&gt;MaHua 在线markdown编辑器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;语法比较简单，就不一一说了&lt;a href=&quot;http://www.360doc.com/content/16/1221/02/1489589_616432866.shtml&quot;&gt;Markdown 语法手册 （完整整理版）&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>(转)为什么你写不好一个快速排序? 谈程序员的职业发展</title>
        <link>https://www.achuan.io/index.html/2018-08-31-Programmer-development.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-08-31-Programmer-development.html</guid>
        <pubDate>Fri, 31 Aug 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;本文转载自：&lt;a href=&quot;http://blogread.cn/it/article/6367?f=wb&quot;&gt;http://blogread.cn/it/article/6367?f=wb&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我常常在想，当初我若不离开完美，现在肯定也是总监级的title了，收入比现在高一倍不止。但是另一方面，在编码能力上我甚至不如某些刚毕业的本科生。比如，快速排序的算法我很熟悉，就一句话：“随机选一个元素，用它把输入集分成两半，对这两半继续递归，然后将递归得到(已排好序)的结果合并”。但几个月前看算法书的时候自己尝试写了一下快速排序，发现远远是另外一回事。虽然我对这个算法很清楚，但是用C++实现的时候充满了疑惑，写出来的代码BUG很多，调了很久才调对。相反，如果拿这个做面试题去面应届生，我相信对北大清华的学生通过率应该很高，至少过半。那么我比他们多了6-7年的工作经验，这些经验又是什么呢？&lt;/p&gt;

&lt;p&gt;工作经验是人生最容易积攒的财富，只增不减。钱和不动资产，差不多也是如此。所以要想向年轻人炫耀成功项目，牛B的经历，是很容易的事情。在一个很好的平台上，与聪明的人共事，顺水推舟，再加上运气不是太差的话，工作3-5年后，必然会有一个值得吹嘘的项目。比如我就老喜欢说我第一次做游戏就带着人做了梦诛，在线多少万多少万，等等。&lt;/p&gt;

&lt;p&gt;但是呢，对一个程序员来说，最核心的价值是什么？是&lt;strong&gt;快速的把想法，变成无bug的正确代码的能力&lt;/strong&gt;。像前面提到的快速排序，如果需求已经很明确，怎么实现已经很清楚，语言你自己选，工具你随便挑。20分钟内代码写不出来，写不对，那就是自己的问题，水平差。&lt;/p&gt;

&lt;p&gt;我之前走了一条弯路，听信软件工程的人说，不要重复造轮子。于是就忽视了这些基础训练。“不要重复造轮子“这句话在公司里是对的，但是在下班后，或是在学校，在自己写代码练手的时候，就绝对是错的。&lt;strong&gt;重写那些经典的算法，是绝佳的思维练习&lt;/strong&gt;。写二分查找的时候，需要根据区间的长度是奇数还是偶数，判断结果是大于还是小于，分成2x2=4种情况考虑，然后再想怎么缩减重复代码。写快速排序的时候，除了实现基本功能外，若是能考虑下比较时发生的相等的情况如何处理，又能把执行效率提升不少。&lt;/p&gt;

&lt;p&gt;看你想要什么。若是想挣更多的钱，谋求更高的职位(无论技术岗还是管理岗)，那么这些都和上述无关。在我现在的公司，每个程序员唯一的出路就是当架构师。这和你能不能写好快速排序没有关系，能看懂牛人写的代码，偶尔做做bug fix或者加个小模块就wonderful了！这就是我牢骚的关键点，随着地位、荣誉、薪水的提升，却逐渐忘却了作为一个程序员，最最基本、最最重要的技能是什么。医生可不像我们这样。即便那医生已经50-60岁了，即便已经是科主任了，依然要做手术主刀。一个手术一不留神做败了，半生积攒的声誉尽毁。&lt;/p&gt;

&lt;p&gt;于是我最近常在反复问自己，通过6年全职工作，我的编码能力有了多少提升？除了更喜欢用大括号把local variable局限在block level，除了更喜欢一心编码时被别人或自己打断，有什么显著、可量化的提升吗？若没有，为什么没有？&lt;/p&gt;

&lt;p&gt;我的职业梦想是，当我说自己是一个程序员的时候，熟悉我的人愿用excellent这个词来形容我。我在傲剑上班时，老板总喜欢说，你们要用自己的实际能力，去赢得同行的尊重。所以我要是下班后多花点时间去coding，总会达成我的愿望吧！&lt;/p&gt;

&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?d8fde0d2545d1e76dfb50dddb897df5c&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;

</description>
      </item>
    
      <item>
        <title>(转)如何学习开源项目</title>
        <link>https://www.achuan.io/index.html/2018-08-31-Learning-the-open-source.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-08-31-Learning-the-open-source.html</guid>
        <pubDate>Fri, 31 Aug 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;本文转自华为章宇的博客，原文链接&lt;a href=&quot;http://yizhaolingyan.net/?p=123&quot;&gt;http://yizhaolingyan.net/?p=123&lt;/a&gt;，转载请注明。&lt;/p&gt;

&lt;p&gt;学习各种开源项目，已经成为很多朋友不可回避的工作内容了。笔者本人也是如此。在接触并学习了若干个开源项目之后，笔者试图对自己工作过程中的若干体会加以总结，以期对一些希望借鉴的朋友有所裨益。&lt;/p&gt;

&lt;p&gt;需要说明的是，笔者本人接触的开源项目大多属于计算机系统领域，例如Linux kernel，KVM，QEMU，OpenStack等。因此，此处介绍的经验必定也有些局限。请读者们自行分辨，区别对待。&lt;/p&gt;

&lt;h2 id=&quot;学习分层和目标管理&quot;&gt;学习分层和目标管理&lt;/h2&gt;
&lt;p&gt;对于一个开源项目，可以将与之相关的各种知识和技能的学习大致划分为如下五个层次：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一层次&lt;/strong&gt;：了解项目的基本概念、基本用途、逻辑结构、基本原理、产生背景、应用场景等基本知识。&lt;/p&gt;

&lt;p&gt;这个层次的基本定位其实就是“科普”。如果对于一个项目只需要有些基本了解，且短期内并不需要上手进行实际技术工作，则学习到这个层次也就可以先应付一下了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二层次&lt;/strong&gt;：掌握项目的基本安装流程和使用方法。&lt;/p&gt;

&lt;p&gt;这个层次的基本定位是“入门”，以便对这个项目获得直观认识，对其安装和使用获得亲身体验。如果只是需要以as-is方式使用这个项目，则初步学习到这个层次即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三层次&lt;/strong&gt;：了解代码的组织，找到各个主要逻辑/功能模块与代码文件之间的对应关系，通过代码分析走通几个关键的、有代表性的执行流程。&lt;/p&gt;

&lt;p&gt;这个层次的基本定位是“深入”，开始理解这个项目的实际实现，能够真正将项目的功能、工作原理和代码实现对应起来，获得对这个项目工作过程的直观认识。这个层次是学习开源项目代码的真正开始。如果希望基于这一项目进行应用开发，或者针对与这一项目密切相关的其他项目进行工作时，则对项目本身的代码进行这一层次的理解，会很有帮助。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四层次&lt;/strong&gt;：了解该项目所有代码模块、程序文件的作用，走通所有主要执行流程。&lt;/p&gt;

&lt;p&gt;这个层次的基本定位是“掌握”，能够比较全面、系统地理解这个项目的设计和实现，并且熟悉项目各个部分的代码。如果希望对项目进行深度定制修改，或者对社区有所贡献，则应当以达到这个层次作为目标。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第五层次&lt;/strong&gt;：钻研、领悟该项目的各种设计思想与代码实现细节。&lt;/p&gt;

&lt;p&gt;这个层次的基本定位是“精通”，精益求精，学无止境。这是大神们追求的境界。如果希望成为项目社区的重要贡献者乃至核心贡献者，则应当以这个层次作为努力的目标。
综上，对于一个开源项目的学习过程可以大致分为五个层次。至于到底要学习到什么阶段，投入多少相关精力，则完全取决于学习的目的。&lt;/p&gt;

&lt;h2 id=&quot;知识基础&quot;&gt;知识基础&lt;/h2&gt;
&lt;p&gt;学习一个开源项目需要的知识基础主要包括：&lt;/p&gt;

&lt;p&gt;1）该项目涉及的技术领域的背景知识。&lt;br /&gt;
举例而言，分析Linux Kenrel，则应该了解操作系统原理；学习OpenStack，则应该知道什么是云计算。如果没有这些背景知识作为基础，上来就死磕源代码，只能是事倍功半。&lt;/p&gt;

&lt;p&gt;2）	该项目开发使用的语言及其各种开发调试工具&lt;br /&gt;
这个就无需多言了。&lt;/p&gt;

&lt;p&gt;3）	英语&lt;br /&gt;
很遗憾，目前为止真正流行的开源项目大部分不是起源于国内。因此，除了学习个别极其流行、文档完备的项目之外，大家还是需要自行搜集阅读英文资料参考。学好英语很重要。&lt;/p&gt;

&lt;p&gt;当然，到底需要准备多少知识基础，完全取决于学习的目的和层次。如果只是想科普一下，也就不必太过麻烦了。&lt;/p&gt;

&lt;h2 id=&quot;学习思路&quot;&gt;学习思路&lt;/h2&gt;
&lt;p&gt;学习一个项目的过程，其实就是由表及里了解分析它的过程。上述提及的五个学习层次便组成了这样一个逐渐深入的过程。在此基础之上，学习、分析代码的过程，也可以尝试做到由表及里、逐渐深入。&lt;/p&gt;

&lt;p&gt;在刚开始接触一个项目的时候，我们看到的其实就是一个黑盒子。根据文档，我们一定会发现盒子上具有若干对外接口。通常而言，这些接口可以被分为三类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;配置接口：用于对盒子的工作模式、基本参数、扩展插件等等重要特性进行配置。这些配置往往是在盒子启动前一次性配好。在盒子的工作过程中，这些配置或者不变，或者只在少数的情况下发生改变。&lt;/li&gt;
  &lt;li&gt;控制接口：用于在盒子的工作过程中，对于一些重要的行为进行操纵。这是盒子的管理员对盒子进行控制命令注入和状态信息读取的通路。&lt;/li&gt;
  &lt;li&gt;数据接口：用于盒子在工作过程中读取外部数据，并在内部处理完成后向外输出数据。这是盒子的用户真正关心的数据通路。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，在分析一个开源项目的代码时，可以围绕重要的配置、控制、数据接口展开分析工作，特别应该注意理解一个关键的接口背后隐藏的操作流程。例如，针对数据接口，至少应当走通一条完整的数据输入输出流程，也即在代码中找到数据从输入接口进入盒子后，经过各种处理、转发步骤，最终从输出接口被传输出去的整个执行过程。一旦走通了这样一条流程，则可以将与数据处理相关的各个主要模块、主要步骤贯穿起来，并将逻辑模块图上和文档中的抽象概念对应到代码实现之中，可以有效推进对于项目的深入理解。&lt;/p&gt;

&lt;p&gt;在实践这一思路的过程中，笔者建议可以优先从控制接口和数据接口中各自选择一二重要者进行背后的执行流程详细分析，力争找到其中每一步的函数调用及数据传递关系（对于一些系统、应用库提供的底层函数可以先行跳过以节省时间）。这一工作完成之后，则第1节中第三层次的学习目标即可初步达成。&lt;/p&gt;

&lt;p&gt;配置接口在不同的项目中的重要程度不同。对于一些架构极为灵活、配置空间甚大的项目（如OpenStack的Ceilometer），则可以适当多花些时间加以研究，否则简单了解即可。&lt;/p&gt;

&lt;p&gt;对于这个学习思路，下文中还将结合实例进行进一步的说明。&lt;/p&gt;

&lt;h2 id=&quot;若干小建议&quot;&gt;若干小建议&lt;/h2&gt;
&lt;p&gt;以下是笔者的一些零散建议，供大家参考。&lt;/p&gt;

&lt;p&gt;1）做好记录&lt;br /&gt;
在刚刚入手开始学习某个项目的源代码时，其实很有点破译密码的感觉。大量的数据结构和函数方法散落在代码的各个角落里，等待着学习者将它们贯穿到一个个重要的执行流程中。因此，在分析学习的过程中，无论有什么零散收获，都值得认真记录下来。珍珠自然会串成项链的。&lt;/p&gt;

&lt;p&gt;2）不要过分纠缠于细节&lt;br /&gt;
立志搞懂一个项目的每行源代码是值得尊敬的，但至少在刚刚入手的时候是没有必要的。如果过于纠缠于代码的实现细节，则可能很快就被搞得头晕眼花不胜其烦了（看英文资料的时候，每遇到一个不认识的词都要立刻查词典么？）。不妨避免细节上的过度纠缠，还是先尽快走通关键的执行流程，将项目的骨干框架搭起来，然后再以此为参照，就可以清晰判断什么代码值得深入分析，什么地方可以简单略过了。&lt;/p&gt;

&lt;p&gt;3）想像和联想很重要&lt;br /&gt;
如前所述，从零开始搞懂一个项目的代码，就像破译密&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?d8fde0d2545d1e76dfb50dddb897df5c&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;码。因此，不妨展开合理的想象和联想，将各个零散的发现和理解联系起来，并加以分析印证。在这个过程中，对项目所在领域的背景知识、对项目本身的逻辑框架和工作原理等方面的理解，都是想像和联想的参照与指导。此外，一些关键的函数名、变量名等等都是联想的hint。本质上，编程语言也是语言，而程序代码就是说明文。在分析代码时，一定要超越语言和代码的细节去理解被说明的事物本身。&lt;/p&gt;

&lt;p&gt;4）该搜就搜&lt;br /&gt;
分析代码的时候，很容易出现的情况就是，一个执行流程走到半截找不到下一步了。。。在这种情况下，当然首先还是推荐采用各种调试工具的单步执行功能加以跟踪。如果暂时不会，或者种种原因只能进行静态代码分析，那么该搜就搜吧。各种IDE工具的文本搜索都能用，哪怕是grep也行。至于到底以什么为搜索关键词，就需要琢磨琢磨了。&lt;/p&gt;

&lt;p&gt;5）外事不决问google，内事不决问百度&lt;br /&gt;
如题，不解释。&lt;/p&gt;

&lt;h2 id=&quot;一个例子openstack-cinder分析&quot;&gt;一个例子：OpenStack Cinder分析&lt;/h2&gt;
&lt;p&gt;此处将以OpenStack Cinder为例，并结合KVM/Qemu和Ceph，说明如何参考上述思路对一个开源项目进行分析。
可能有朋友奇怪为什么选这么个东东做例子。这个吧。。。写文章是忽发起想，举例子是随手抓来。木有原因。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先，想对Cinder进行分析，一定要了解若干相关的基础知识&lt;/strong&gt;。什么是云计算？什么是块存储？什么是OpenStack？Cinder在OpenStack里的作用？等等等等。如果对这些东西没有概念，则后续学习是很难开展下去的。&lt;/p&gt;

&lt;p&gt;在此基础上，如果有条件，则最好能够亲自部署和实际操作一下Cinder（包括必要的其他OpenStack组件），以便对Cinder获得一个直观的认识和体验，为后续分析提供一些参考。此处假定Cinder使用的后端是Ceph，而OpenStack上运行的虚拟机是KVM。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;然后，应该从概念上对我们要分析的系统的逻辑框架有个理解&lt;/strong&gt;。从总体的范畴上讲，应该了解Horizon和Nova各自的逻辑模块结构，以及它们和Cinder的协同工作方式、关系。这部分与Cinder的控制接口及执行路径分析密切相关。此外，还应该了解Cinder和KVM/QEMU、Ceph之间的相互关系。这对于真正理解Cinder很有帮助。从Cinder自身而言，应该了解其内部逻辑模块构成、各自的功能、相互间的控制、数据连接关系等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在完成上述准备之后，则可以开始对Cinder的代码进行分析了&lt;/strong&gt;。如前所述，应该考虑在控制接口和数据接口中各自选择一两个关键的、有代表性的加以分析。至于配置接口，假定其实现了某一配置即可，暂时不需要过多花费时间。
Cinder的核心功能其实是OpenStack上的volume管理。至少在Cinder+Ceph方案中，Cinder自身并不在数据传输关键路径上。因此，控制接口的分析就是Cinder源代码分析的重中之重。就入手阶段而言，则有两个接口及其对应执行流程可以作为Cinder分析的起点，即volume的create和attach操作。如果能够彻底打通这两个操作的执行流程（至少要看到Cinder与Ceph通过librbd交互的层面），则对于真正理解Cinder的功能与实现大有帮助。&lt;/p&gt;

&lt;p&gt;虽然基于KVM的虚拟机在通过QEMU访问Cinder创建的、Ceph提供的volume时并不通过Cinder，也即，这一部分的源代码其实已经超出了Cinder源代码学习的范畴，但是，如果希望真正彻底地理解Cinder，则对于这一部分知识还是应该有所涉猎，至少应该有概念上的了解。&lt;/p&gt;

&lt;p&gt;在达到上述阶段之后，则可以根据自身的需求决定后续计划了。&lt;/p&gt;

&lt;p&gt;以上就是笔者结合个人经验对开源项目学习方法给出的若干建议。见解粗浅，欢迎指正，非常感谢～&lt;/p&gt;

&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?d8fde0d2545d1e76dfb50dddb897df5c&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;

</description>
      </item>
    
      <item>
        <title>Ubuntu调教日记之Sublime Texet3</title>
        <link>https://www.achuan.io/index.html/2018-08-30-Ubuntu-set-up-sublime.html</link>
        <guid isPermaLink="true">https://www.achuan.io/index.html/2018-08-30-Ubuntu-set-up-sublime.html</guid>
        <pubDate>Thu, 30 Aug 2018 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;接触linux这段时间真的是各种折腾，我几乎所有把流行的发行版都装了一遍，最终选择了ubuntu18.04，毕竟ui强迫症，还好社区比较强大，遇到毛病解决不会太难，初次接触它的过程中也是遇到各种问题，不过通过这几个月的学习，现在已经我可以熟练敲出各种命令并解决一些日常小毛病。没办法，生命在于折腾吧。&lt;/p&gt;

&lt;p&gt;Sublime Text3 是一款轻量级的编辑器，它干净、实用、漂亮，还有它那强大全面的插件库。不过我比较喜欢它的四个方面：跨平台、启动快、多行编辑和VIM模式。&lt;/p&gt;

&lt;p&gt;好了，我们直接入正题，按顺序执行下面命令开始安装！&lt;/p&gt;

&lt;h2 id=&quot;一安装篇&quot;&gt;一.安装篇&lt;/h2&gt;

&lt;p&gt;1.通过终端运行命令安装密钥：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.安装apt-transport-https软件包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install apt-transport-https
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.将Sublime Text稳定库添加到您的软件源中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.更新软件源为最新版&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.安装Sublime Text 耐心等待一会儿&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install sublime-text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上5步就安装成功了！接下来是解决Ubuntu下Sublime不能输入中文的问题！
按顺序执行一下命令！&lt;/p&gt;

&lt;p&gt;1.Git克隆项目到本地Clone&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/lyfeyaj/sublime-text-imfix.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.运行脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd sublime-text-imfix &amp;amp;&amp;amp; ./sublime-imfix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完”运行脚本“命令后重启Sublime，就可以输入中文了！
如果还不行，你下方请留言咱们再讨论…&lt;/p&gt;

&lt;h2 id=&quot;二插件篇&quot;&gt;二.插件篇&lt;/h2&gt;

&lt;p&gt;如果说安装给予Sublime生命，那插件就是它的灵魂。Sublime拥有的插件非常全面且实用。做为一个UI强迫症的我，界面好不好看直接影响到工作的效率。下面这些插件都是我比较喜欢的，看一看说不定你也会深深爱上它。&lt;/p&gt;

&lt;p&gt;1.首先我们打开Sublime Text，按Ctrl+`（它和qq输入法快捷键冲突）&lt;/p&gt;

&lt;p&gt;2.复制粘贴以下代码添加至命令行，然后回车（它用来安装插件的工具）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.重启&lt;strong&gt;Sublime Text&lt;/strong&gt;，查看 &lt;strong&gt;Perferences &amp;gt; Package settings&lt;/strong&gt; 中是否有 &lt;strong&gt;Package control（命令面板）&lt;/strong&gt; 这一项，如果有，则安装成功&lt;/p&gt;

&lt;p&gt;Package control 安装成功。方便以后更新、卸载Sublime插件啦。&lt;/p&gt;

&lt;p&gt;Package control 安装好之后打开它快捷键：&lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;输入 Install Package （&lt;strong&gt;输入简写 IP 也可以&lt;/strong&gt;）找到一下对应的提示，选择安装包，下载安装稍等片刻（&lt;strong&gt;左下角 状态栏&lt;/strong&gt;），&lt;/p&gt;

&lt;p&gt;下载好后会自动弹出该插件的配置信息，无需保存，关闭即可。
&lt;strong&gt;Perferences &amp;gt; Package settings 中看到对应的包名。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果想要删除插件，调出命令面板输入， &lt;strong&gt;remove&lt;/strong&gt;， 调出 &lt;strong&gt;Remove Package&lt;/strong&gt; 选项并回车，选择你要删除的插件即可。&lt;/p&gt;

&lt;p&gt;更新插命令：&lt;strong&gt;upgrade packages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;汉化Sublime，用&lt;strong&gt;Package conntrol&lt;/strong&gt;装第一个插件&lt;strong&gt;“localization”&lt;/strong&gt;
英文好的请略过…&lt;/p&gt;

&lt;p&gt;调出命令面板并输入：&lt;strong&gt;Install Package&lt;/strong&gt;
然后在输入框中输入：&lt;strong&gt;localization&lt;/strong&gt;
就会发现汉化语音的相关插件，稍微等待，自动弹出插件安装信息&lt;/p&gt;

&lt;p&gt;好了，折腾了半会儿，接下来的就是大家最喜欢的“皮肤主题和代码插件”&lt;/p&gt;

&lt;p&gt;AutoFileName　　　&lt;strong&gt;路径提示插件&lt;/strong&gt;，如 &amp;lt;img src=”” /&amp;gt;　就会出现提示，就不上图了…&lt;/p&gt;

&lt;p&gt;ConvertToUTF-8　　支持不被Sublime支持的文件，特别是中日韩用户使用的GB2312，GBK等&lt;/p&gt;

&lt;p&gt;Boxy Theme　　　拥有四个&lt;strong&gt;高品质&lt;/strong&gt;的&lt;strong&gt;主题&lt;/strong&gt;和多个&lt;strong&gt;配色方案&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BracketHighlighter　　　一个&lt;strong&gt;显示颜色代码&lt;/strong&gt;{ &lt;strong&gt;“#000000”&lt;/strong&gt; }的视觉颜色的插件,含颜色值的LESS,Sass,和Stylus变量,它是一个帮助您更直观处理颜色的插件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;修改配置方法如下:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Preferences -&amp;gt; Package Settings -&amp;gt; Color Highlighter -&amp;gt; Settings - User,

// 配置成如下内容： 

{
&quot;search_colors_in&quot;: {
    &quot;all_content&quot;: {
        &quot;enabled&quot;: true,
        &quot;color_highlighters&quot;: {
            &quot;color_scheme&quot;: {
                // 主要是修改这两项
                &quot;enabled&quot;: true,
                &quot;highlight_style&quot;: &quot;filled&quot; // 填充的意思
                }
            }
        }
    }
} 然后重启 Sublime 就可以了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Color Highlight　　　&lt;strong&gt;缩进&lt;/strong&gt;，代码高亮等转换为 html 代码 　&lt;/p&gt;

&lt;p&gt;Colorsublime　　　直接从Sublime Text更改主题&lt;/p&gt;

&lt;p&gt;DocBlockr　　　DocBlockr很好用，不仅仅可以&lt;strong&gt;自动生成注释&lt;/strong&gt;，还可&lt;strong&gt;以手动编辑注释的格式&lt;/strong&gt;
&lt;strong&gt;修改配置方法如下:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Preferences -&amp;gt; Package Settings -&amp;gt; DocBlockr -&amp;gt; Settings - User,

// 配置成如下内容：

  {
&quot;jsdocs_extra_tags&quot;:[
    &quot;@Author Hybrid&quot;,
    &quot;@DateTime &quot;,
    &quot;@copyright ${1:[copyright]}&quot;,
    &quot;@license ${1:[license]}&quot;,
    &quot;@version ${1:[version]}&quot;
],
&quot;jsdocs_function_description&quot;: false   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Emmet　　　可以帮助 html &lt;strong&gt;快速输入代码&lt;/strong&gt; 如快速新建html头部,打出”!” 或者 &lt;strong&gt;html:5&lt;/strong&gt;，然后按下 &lt;strong&gt;Tab&lt;/strong&gt; 键或 &lt;strong&gt;Ctrl+E&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Material Theme　　　多个&lt;strong&gt;高品质&lt;/strong&gt;的&lt;strong&gt;主题&lt;/strong&gt;和多个&lt;strong&gt;配色方案&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Package Control　　　命令面板，Sublime 最重要的功能之一&lt;/p&gt;

&lt;p&gt;SublimeLinter　　　&lt;strong&gt;检查语法&lt;/strong&gt;是否有错误&lt;/p&gt;

&lt;p&gt;View inBrowser　　　快捷浏览 html 文件，可以配置快捷键&lt;/p&gt;

&lt;h2 id=&quot;三快捷键篇&quot;&gt;三.快捷键篇&lt;/h2&gt;

&lt;p&gt;熟练的掌握的快捷键，事半功倍！下面是一些是我认为较为实用的，并不全面。&lt;/p&gt;

&lt;h3 id=&quot;选择类&quot;&gt;选择类：&lt;/h3&gt;

&lt;p&gt;Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。&lt;/p&gt;

&lt;p&gt;Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。&lt;/p&gt;

&lt;p&gt;Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。&lt;/p&gt;

&lt;p&gt;Ctrl+M 光标移动至括号内结束或开始的位置。&lt;/p&gt;

&lt;p&gt;Ctrl+Enter 在下一行插入新行，即使光标不在行尾，也能快速向下插入一行。&lt;br /&gt;
Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。&lt;/p&gt;

&lt;p&gt;Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。&lt;br /&gt;
Ctrl+Shift+] 选中代码，按下快捷键，展开代码。&lt;br /&gt;
Ctrl+K+0 展开所有折叠代码。&lt;/p&gt;

&lt;h3 id=&quot;编辑类&quot;&gt;编辑类&lt;/h3&gt;

&lt;p&gt;Ctrl+J 合并选中的多行代码为一行。&lt;/p&gt;

&lt;p&gt;Tab 向右缩进。&lt;br /&gt;
Shift+Tab 向左缩进。&lt;/p&gt;

&lt;p&gt;Ctrl+/ 注释单行。&lt;br /&gt;
Ctrl+Shift+/ 注释多行。&lt;/p&gt;

&lt;p&gt;Ctrl+Z 撤销。&lt;br /&gt;
Ctrl+Y 恢复撤销。&lt;/p&gt;

&lt;p&gt;Ctrl+S 保存&lt;br /&gt;
Ctrl+Shift+S 另存为&lt;/p&gt;

&lt;p&gt;ctrl+W 关闭文件&lt;br /&gt;
Ctrl+Shift+T 重新打开最近关闭的文件&lt;/p&gt;

&lt;h3 id=&quot;搜索类&quot;&gt;搜索类&lt;/h3&gt;

&lt;p&gt;Ctrl+F 打开底部搜索框，查找关键字。&lt;/p&gt;

&lt;p&gt;Ctrl+P 打开搜索框，输入项目文件名，快速搜索文件，输入@和关键字，查找文件中函数名，输入：和数字跳转到文件中该行代码，输入#和关键字，查找变量名。&lt;/p&gt;

&lt;p&gt;Ctrl+Shift+P 打开命令面板&lt;/p&gt;

&lt;p&gt;Esc 退出光标多行选择，退出搜索框，命令面板等。&lt;/p&gt;

&lt;h3 id=&quot;显示类&quot;&gt;显示类&lt;/h3&gt;

&lt;p&gt;Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。&lt;/p&gt;

&lt;p&gt;Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字）&lt;br /&gt;
Alt+Shift+2 左右分屏-2列&lt;br /&gt;
Alt+Shift+3 左右分屏-3列&lt;br /&gt;
Alt+Shift+4 左右分屏-4列&lt;br /&gt;
Alt+Shift+5 等分4屏&lt;br /&gt;
Alt+Shift+8 垂直分屏-2屏&lt;br /&gt;
Alt+Shift+9 垂直分屏-3屏&lt;/p&gt;

&lt;p&gt;Ctrl+K+B 开启/关闭侧边栏。&lt;/p&gt;

&lt;p&gt;F11 全屏模式&lt;br /&gt;
Shift+F11 免打扰模式&lt;/p&gt;

&lt;p&gt;如有写的不足之处，还请您多多指教！&lt;br /&gt;
最后再秀一下我的 Sublime 感觉字体很棒，看着很舒服 嘿嘿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-08-30-sublime/sublime.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?d8fde0d2545d1e76dfb50dddb897df5c&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;

</description>
      </item>
    
  </channel>
</rss>